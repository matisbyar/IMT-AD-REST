---
openapi: 3.0.3
info:
  title: User API
  description: This is the API of the User service
  contact:
    email: helene.coullon@imt-atlantique.fr
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /:
    get:
      tags:
        - developers
      summary: home page of the service
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1>Test</h1>
  /users:
    get:
      tags:
        - developers
      summary: get the full JSON database
      operationId: get_json
      responses:
        "200":
          description: full JSON
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUser'
  /users/{userid}:
    get:
      tags:
        - developers
      summary: get the user by its id
      operationId: get_user_by_id
      parameters:
        - name: id
          in: path
          description: identifier.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: No user with this ID
  /users/{userId}:
    post:
      tags:
        - developers
      summary: add a new user
      operationId: add_user
      parameters:
        - name: userId
          in: path
          description: identifier.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: User object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: user added
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user added
        "409":
          description: user ID already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: user ID already exists
  /user/{userId}:
      delete:
        tags:
          - developers
        summary: delete a user by its id
        operationId: del_user
        parameters:
          - name: userId
            in: path
            description: identifier.
            required: true
            style: simple
            explode: false
            schema:
              type: string
        responses:
          "200":
            description: User deleted
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          "400":
            description: user not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: user not found
  /user/{userId}:
    put:
      tags:
        - developers
      summary: update user last_active timestamp by its id
      operationId: update_user_lastactive
      parameters:
        - name: userId
          in: path
          description: identifier.
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: last_active
          in: query
          description: last active timestamp.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "201":
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: user not found
  /user/{userId}/bookings/movies:
    get:
      tags:
        - developers
      summary: Retrieve all user's bookings by their ID
      operationId: get_movies_from_usersbooking
      parameters:
        - name: userId
          in: path
          description: identifier.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: Movies from user's bookings
          content:
            application/json:
              schema:
                type: object
                properties:
                  movies:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        title:
                          type: string
                        director:
                          type: string
                        year:
                          type: integer
        "409":
          description: User has no bookings or an error occurred while fetching a movie
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User has no bookings
components:
  schemas:
    AllUser:
      required:
        - users
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    User:
      required:
        - id
        - name
        - last_active
      type: object
      properties:
        id:
          type: string
          example: "john_appleseed"
        name:
          type: string
          example: "John Appleseed"
        last_active:
          type: integer
          example: 1360031010